{"version":3,"sources":["webpack:///./src/components/source-card/subtitle/index.js","webpack:///./src/components/source-card/index.js","webpack:///./src/utils/string/index.js","webpack:///./src/pages/sources.js"],"names":["Subtitle","list","prefix","hasItems","className","joinList","defaultProps","iconMap","journal","website","SourceCard","string","author","publisher","title","type","url","cn","styles","sourceCard","sourceIcon","charAt","toUpperCase","slice","to","query","SourcesPage","sources","data","allSourcesJson","halveList","map","column","index","key","source","node","id"],"mappings":"yLAIMA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACfC,YAASF,GACP,uBAAGG,UAAU,2BACVF,GAAaA,EAAP,IACNG,YAASJ,IAEV,MAOND,EAASM,aAAe,CACtBL,KAAM,GACNC,OAAQ,MAGKF,Q,kBCdTO,EAAU,CACdC,QAAS,eACTC,QAAS,aAGLC,EAAa,SAAC,GAAD,ICbOC,EDaJC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAWC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,IAAnC,OACjB,6BAASZ,UAAWa,IAAG,OAAQC,IAAOC,aACpC,yBAAKf,UAAU,gBACb,yBAAKA,UAAWa,IAAG,oBAAqBC,IAAOE,aAC7C,0BAAMhB,UAAU,kBACd,uBACEA,UAAWa,IAAG,YAAaV,EAAQQ,IACnCD,OCpBcH,EDoBII,ECnB5BJ,EAAOU,OAAO,GAAGC,cAAgBX,EAAOY,MAAM,QDwB1C,wBAAInB,UAAU,cAAcU,GAE5B,kBAAC,EAAD,CAAUb,KAAMW,EAAQV,OAAO,OAE/B,kBAAC,EAAD,CAAUD,KAAMY,IAEhB,kBAAC,IAAD,CAAcW,GAAIR,EAAKZ,UAAU,gCAAjC,gBAeNM,EAAWJ,aAAe,CACxBM,OAAQ,GACRC,UAAW,IAGEH,Q,+CEzCf,IAsBae,EAAK,YAoCHC,UA1DK,SAAC,GAAD,IAEEC,EAFF,EAClBC,KACEC,eAAkBF,QAFF,OAKlB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKb,MAAM,YACX,kBAAC,IAAD,uCACA,yBAAKV,UAAU,WACZ0B,YAAUH,GAASI,KAAI,SAACC,EAAQC,GAAT,OACtB,yBAAKC,IAAKD,EAAO7B,UAAU,UACxB4B,EAAOD,KAAI,SAAAI,GAAM,OAChB,kBAAC,EAAD,eAAYD,IAAKC,EAAOC,KAAKC,IAAQF,EAAOC","file":"component---src-pages-sources-js-aaea241a600b6eb1b03f.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { hasItems, joinList } from \"../../../utils/list\";\n\nconst Subtitle = ({ list, prefix }) =>\n  hasItems(list) ? (\n    <p className=\"subtitle is-6 is-italic\">\n      {prefix && `${prefix} `}\n      {joinList(list)}\n    </p>\n  ) : null;\n\nSubtitle.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.string),\n  prefix: PropTypes.string,\n};\n\nSubtitle.defaultProps = {\n  list: [],\n  prefix: null,\n};\n\nexport default Subtitle;\n","import cn from \"classnames\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { capitalize } from \"../../utils/string\";\nimport ExternalLink from \"../external-link\";\nimport Subtitle from \"./subtitle\";\nimport styles from \"./index.module.css\";\n\nconst iconMap = {\n  journal: \"fa-newspaper\",\n  website: \"fa-laptop\",\n};\n\nconst SourceCard = ({ author, publisher, title, type, url }) => (\n  <article className={cn(\"card\", styles.sourceCard)}>\n    <div className=\"card-content\">\n      <div className={cn(\"has-text-centered\", styles.sourceIcon)}>\n        <span className=\"icon is-medium\">\n          <i\n            className={cn(\"fas fa-2x\", iconMap[type])}\n            title={capitalize(type)}\n          />\n        </span>\n      </div>\n\n      <h2 className=\"title is-5\">{title}</h2>\n\n      <Subtitle list={author} prefix=\"By\" />\n\n      <Subtitle list={publisher} />\n\n      <ExternalLink to={url} className=\"button is-black is-fullwidth\">\n        Read more\n      </ExternalLink>\n    </div>\n  </article>\n);\n\nSourceCard.propTypes = {\n  author: PropTypes.arrayOf(PropTypes.string),\n  publisher: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nSourceCard.defaultProps = {\n  author: [],\n  publisher: [],\n};\n\nexport default SourceCard;\n","export const capitalize = string =>\n  string.charAt(0).toUpperCase() + string.slice(1);\n","import { graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Container from \"../components/container\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport SourceCard from \"../components/source-card\";\nimport Title from \"../components/title\";\nimport { halveList } from \"../utils/list\";\n\nconst SourcesPage = ({\n  data: {\n    allSourcesJson: { sources },\n  },\n}) => (\n  <Layout>\n    <Container>\n      <SEO title=\"Sources\" />\n      <Title>More information about FODMAPs</Title>\n      <div className=\"columns\">\n        {halveList(sources).map((column, index) => (\n          <div key={index} className=\"column\">\n            {column.map(source => (\n              <SourceCard key={source.node.id} {...source.node} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </Container>\n  </Layout>\n);\n\nexport const query = graphql`\n  query SourcesPageQuery {\n    allSourcesJson(sort: { fields: title }) {\n      sources: edges {\n        node {\n          author\n          id\n          publisher\n          title\n          type\n          url\n          year\n        }\n      }\n    }\n  }\n`;\n\nSourcesPage.propTypes = {\n  data: PropTypes.shape({\n    allSourcesJson: PropTypes.shape({\n      sources: PropTypes.arrayOf(\n        PropTypes.shape({\n          author: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          publisher: PropTypes.string,\n          title: PropTypes.string,\n          type: PropTypes.string,\n          url: PropTypes.string,\n          year: PropTypes.number,\n        })\n      ),\n    }),\n  }).isRequired,\n};\n\nexport default SourcesPage;\n"],"sourceRoot":""}